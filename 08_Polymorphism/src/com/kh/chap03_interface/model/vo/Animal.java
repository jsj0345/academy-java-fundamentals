package com.kh.chap03_interface.model.vo;

//인터페이스
//접근제한자 interface 인터페이스명()
public interface Animal {
	
	/*
	 * 인터페이스는 추상메소드만 가지는것이 기본이기 때문에
	 * 메소드 정의시 public abstract 키워드를 생략할 수 있다.
	 * 인터페이스에서는 일반 필드, 일반 메소드가 존재 할수 없고
	 * 필드는 상수필드만 존재 가능하다. final static
	 * 때문에 필드도 마찬가지로 public static final 키워드가 생략가능함.
	 * 
	 * 필수적으로 구현해야하는 기능이 있을때 해당 기능들을 묶어서 규칙성과 강제성을 갖도록 하는것
	 * 추상 클래스보다 규칙성,강제성이 강하다.
	 * 
	 * 추상클래스와 인터페이스
	 * 공통점
	 * -객체 생성불가(미완성이기 때문), 참조변수로는 사용가능(다형성)
	 * -상속(구현)하는 클래스에 추상메소드를 오버라이딩(재정의)하도록 강제한다.
	 * 차이점
	 * 추상클래스 : 일반필드, 일반메소드를 가질 수 있음
	 * 인터페이스 : 모든 필드는 상수 필드, 모든 메소드는 추상 메소드를 기본으로 한다. 예외) default 메소드 가능
	 * 
	 * 추상클래스는 기존 클래스에 추상 메소드를 더하여 확장하기 위한 역할로 사용되고
	 * 인터페이스는 클래스의 기능을 강제하여 규칙을 갖게하는 역할로 사용된다.
	 * 
	 * 상속의 키워드는 extends
	 * 구현의 키워드는 implements
	 * 
	 * 클래스간의 상속, 인터페이스간의 상속은 extends
	 * 클래스와 인터페이스간의 구현은 implements를 사용
	 * 이때 클래스에서 인터페이스를 다중구현(다중상속)을 할 수 있다.
	 * 클래스끼리는 단일 상속만 허용, 인터페이스끼리는 다중상속도 허용한다. 
	 */
	
	//인터페이스에서 필드는 상수필드로 판별
	public static final String STR = "상수필드";
	//당연하게도 상수필드만 갖기 때문에 public static final 키워드가 생략 가능함.
	String Text = "상수필드맞죠";
	
	//인터페이스에서 메소드는 기본적으로 추상메소드로 판별
	public abstract void speak();
	
	//당연하게도 추상메소드를 갖기 때문에 public abstract 없이도 추상메소드로 판별한다.
	void run(); 
	
	//jdk 8 버전 이전에는 추상 메소드만을 가질 수 있었지만
	//jdk 8 버전 이후 default 메소드가 추가되었다. (일반 메소드형태)
	//default 키워드 필요
	
	default void test() {
		System.out.println("인터페이스에 있는 기본 메소드(default)");
	}
	
//	기본 메소드는 구현 불가능
//	public void test2() {
//		
//	}
	
	void eat(); 

}
